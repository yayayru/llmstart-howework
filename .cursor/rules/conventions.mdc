---
alwaysApply: true
---
# Правила разработки кода

Этот документ содержит основные правила для разработки кода проекта Telegram-бота с LLM. Подробное техническое видение проекта см. в [@vision.md](vision.md).

## Общие принципы

1. **KISS**: максимально простые решения, никакого оверинжиниринга.
2. **Функциональный подход**: используйте функции вместо классов.
3. **Минимум зависимостей**: добавляйте только необходимые библиотеки.
4. **Чистый код**: понятные имена переменных и функций, комментарии только при необходимости.

## Структура кода

1. Следуйте структуре проекта, описанной в [@vision.md](vision.md#3-структура-проекта).
2. Размещайте код в соответствующих модулях по назначению:
   - `bot/` — логика Telegram-бота
   - `llm/` — взаимодействие с LLM, промпты, память

## Стиль кода

1. **Асинхронность**: используйте `async/await` для обработчиков сообщений Telegram.
2. **Типизация**: используйте аннотации типов для функций.
3. **Обработка ошибок**: всегда обрабатывайте исключения, особенно при взаимодействии с API.
4. **Конфигурация**: получайте настройки только из переменных окружения через `config.py`.

## Работа с данными

1. Храните историю диалогов в памяти согласно модели данных из [@vision.md](vision.md#5-модель-данных).
2. Не используйте внешние БД или файловое хранилище для данных.

## Логирование

1. Используйте стандартный модуль `logging`.
2. Логируйте все запросы к LLM и события Telegram-бота.
3. Используйте соответствующие уровни логирования (INFO, ERROR, DEBUG).

## Тестирование

1. Пишите тесты только для ключевой логики.
2. Используйте `pytest` для тестирования. # Правила разработки кода

Этот документ содержит основные правила для разработки кода проекта Telegram-бота с LLM. Подробное техническое видение проекта см. в [@vision.md](vision.md).

## Общие принципы

1. **KISS**: максимально простые решения, никакого оверинжиниринга.
2. **Функциональный подход**: используйте функции вместо классов.
3. **Минимум зависимостей**: добавляйте только необходимые библиотеки.
4. **Чистый код**: понятные имена переменных и функций, комментарии только при необходимости.

## Структура кода

1. Следуйте структуре проекта, описанной в [@vision.md](vision.md#3-структура-проекта).
2. Размещайте код в соответствующих модулях по назначению:
   - `bot/` — логика Telegram-бота
   - `llm/` — взаимодействие с LLM, промпты, память

## Стиль кода

1. **Асинхронность**: используйте `async/await` для обработчиков сообщений Telegram.
2. **Типизация**: используйте аннотации типов для функций.
3. **Обработка ошибок**: всегда обрабатывайте исключения, особенно при взаимодействии с API.
4. **Конфигурация**: получайте настройки только из переменных окружения через `config.py`.

## Работа с данными

1. Храните историю диалогов в памяти согласно модели данных из [@vision.md](vision.md#5-модель-данных).
2. Не используйте внешние БД или файловое хранилище для данных.

## Логирование

1. Используйте стандартный модуль `logging`.
2. Логируйте все запросы к LLM и события Telegram-бота.
3. Используйте соответствующие уровни логирования (INFO, ERROR, DEBUG).

## Тестирование

1. Пишите тесты только для ключевой логики.
2. Используйте `pytest` для тестирования. 