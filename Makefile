# Makefile –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–∞ —Å LLM

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
IMAGE_NAME = telegram-llm-bot
CONTAINER_NAME = telegram-llm-bot
ENV_FILE = .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
.PHONY: check-env
check-env:
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example:"; \
		echo "   cp env.example .env"; \
		echo "   –ó–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."; \
		exit 1; \
	fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
.PHONY: install
install:
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	uv sync

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
.PHONY: build
build:
	@echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	docker build -t $(IMAGE_NAME) .
	@echo "‚úÖ –û–±—Ä–∞–∑ $(IMAGE_NAME) —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
.PHONY: run
run: check-env
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
	docker run -d --name $(CONTAINER_NAME) --env-file $(ENV_FILE) $(IMAGE_NAME)
	@echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ $(CONTAINER_NAME)"

# –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)
.PHONY: dev
dev: check-env
	@echo "üîß –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	uv run python main.py

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
.PHONY: stop
stop:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	docker stop $(CONTAINER_NAME) || true
	@echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
.PHONY: logs
logs:
	@echo "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
	docker logs -f $(CONTAINER_NAME)

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
.PHONY: test
test:
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	uv run pytest -v

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
.PHONY: test-coverage
test-coverage:
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º..."
	uv run pytest -v --cov=. --cov-report=html --cov-report=term

# –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞
.PHONY: lint
lint:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞..."
	uv run flake8 . --exclude=.venv --max-line-length=88
	uv run black . --check --exclude=.venv

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
.PHONY: format
format:
	@echo "üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	uv run black . --exclude=.venv

# –û—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –æ–±—Ä–∞–∑–∞)
.PHONY: clean
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
	docker stop $(CONTAINER_NAME) || true
	docker rm $(CONTAINER_NAME) || true
	docker rmi $(IMAGE_NAME) || true
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è dangling images)
.PHONY: clean-all
clean-all: clean
	@echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
	docker system prune -f
	@echo "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫)
.PHONY: restart
restart: stop build run

# Docker Compose –∫–æ–º–∞–Ω–¥—ã
.PHONY: up
up: check-env
	@echo "üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose..."
	docker-compose up -d
	@echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ docker-compose"

.PHONY: down
down:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ docker-compose..."
	docker-compose down
	@echo "‚úÖ Docker-compose –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

.PHONY: up-dev
up-dev: check-env
	@echo "üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
	@echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"

.PHONY: logs-compose
logs-compose:
	@echo "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ docker-compose..."
	docker-compose logs -f

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
.PHONY: status
status:
	@echo "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
	docker ps -a --filter name=$(CONTAINER_NAME)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
.PHONY: shell
shell:
	@echo "üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É..."
	docker exec -it $(CONTAINER_NAME) /bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ env.example –≤ .env)
.PHONY: setup
setup:
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ —à–∞–±–ª–æ–Ω–∞..."; \
		cp env.example $(ENV_FILE); \
		echo "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."; \
	else \
		echo "‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi

# –ü–æ–º–æ—â—å
.PHONY: help
help:
	@echo "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@echo "  üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "    setup      - –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞"
	@echo "    build      - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
	@echo "    run        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
	@echo "    dev        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "    stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
	@echo "    restart    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å (stop + build + run)"
	@echo ""
	@echo "  üê≥ Docker Compose:"
	@echo "    up         - –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ docker-compose"
	@echo "    down       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker-compose"
	@echo "    up-dev     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "    logs-compose - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ docker-compose"
	@echo ""
	@echo "  üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:"
	@echo "    install    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "    test       - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo "    test-coverage - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
	@echo "    lint       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥"
	@echo "    format     - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
	@echo ""
	@echo "  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
	@echo "    logs       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
	@echo "    status     - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
	@echo "    shell      - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É"
	@echo ""
	@echo "  üßπ –û—á–∏—Å—Ç–∫–∞:"
	@echo "    clean      - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –æ–±—Ä–∞–∑"
	@echo "    clean-all  - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
	@echo ""

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
.DEFAULT_GOAL := help 