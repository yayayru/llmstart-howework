import asyncio
import logging
import time
from openai import OpenAI, APIError, RateLimitError, APITimeoutError
from typing import List, Dict, Optional
from config import get_openrouter_api_key, get_llm_model, get_llm_timeout

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
MAX_RETRIES = 3
RETRY_DELAY = 1.0  # —Å–µ–∫—É–Ω–¥—ã

async def get_llm_response(messages: List[Dict[str, str]], max_retries: int = MAX_RETRIES) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM —á–µ—Ä–µ–∑ OpenRouter API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}]
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    
    Returns:
        –û—Ç–≤–µ—Ç –æ—Ç LLM
    """
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –¥–æ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫
    model = get_llm_model()
    timeout = get_llm_timeout()
    
    logger.info(f"üîÑ LLM REQUEST | Model: {model} | Messages: {len(messages)}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if messages:
        system_msg = messages[0] if messages[0].get('role') == 'system' else None
        if system_msg:
            logger.info(f"ü§ñ System prompt: {system_msg['content'][:200]}...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_messages = [msg for msg in messages if msg.get('role') == 'user']
        if user_messages:
            last_user_msg = user_messages[-1]['content']
            logger.info(f"üë§ Last user message: {last_user_msg}")
    
    for attempt in range(max_retries + 1):
        try:
            client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=get_openrouter_api_key()
            )
            
            if attempt > 0:
                logger.info(f"üîÑ LLM RETRY | Attempt: {attempt + 1}/{max_retries + 1}")
            
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model=model,
                messages=messages,
                timeout=timeout
            )
            
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model=model,
                messages=messages,
                timeout=timeout
            )
            
            if not response.choices or len(response.choices) == 0:
                raise APIError("No choices returned from LLM API")
            
            result = response.choices[0].message.content
            if not result:
                raise APIError("Empty content returned from LLM API")
            
            elapsed_time = time.time() - start_time
            logger.info(f"‚úÖ LLM RESPONSE | Success | Length: {len(result)} chars | Time: {elapsed_time:.2f}s")
            logger.info(f"üéØ LLM Content: {result}")
            
            return result
            
        except APITimeoutError as e:
            logger.warning(f"LLM request timeout on attempt {attempt + 1}: {str(e)}")
            if attempt < max_retries:
                await asyncio.sleep(RETRY_DELAY * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue
            logger.error("LLM request timeout after all retries")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
            
        except RateLimitError as e:
            logger.warning(f"LLM rate limit exceeded on attempt {attempt + 1}: {str(e)}")
            if attempt < max_retries:
                await asyncio.sleep(RETRY_DELAY * (attempt + 2))  # –ë–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limit
                continue
            logger.error("LLM rate limit exceeded after all retries")
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            
        except APIError as e:
            error_message = str(e).lower()
            logger.warning(f"LLM API error on attempt {attempt + 1}: {str(e)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
            if any(keyword in error_message for keyword in ["temporary", "unavailable", "502", "503", "504"]):
                if attempt < max_retries:
                    await asyncio.sleep(RETRY_DELAY * (attempt + 1))
                    continue
            
            logger.error(f"LLM API error after attempt {attempt + 1}: {str(e)}")
            if "invalid" in error_message or "unauthorized" in error_message:
                return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
            
        except Exception as e:
            logger.error(f"Unexpected LLM error on attempt {attempt + 1}: {str(e)}")
            if attempt < max_retries:
                await asyncio.sleep(RETRY_DELAY * (attempt + 1))
                continue
            logger.error(f"Unexpected LLM error after all retries: {str(e)}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."

async def validate_messages(messages: List[Dict[str, str]]) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ LLM
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã
    """
    if not messages or len(messages) == 0:
        logger.error("Empty messages list provided to LLM")
        return False
    
    for i, message in enumerate(messages):
        if not isinstance(message, dict):
            logger.error(f"Message {i} is not a dictionary: {type(message)}")
            return False
        
        if "role" not in message or "content" not in message:
            logger.error(f"Message {i} missing required fields: {message.keys()}")
            return False
        
        if message["role"] not in ["system", "user", "assistant"]:
            logger.error(f"Message {i} has invalid role: {message['role']}")
            return False
        
        if not message["content"] or len(message["content"].strip()) == 0:
            logger.error(f"Message {i} has empty content")
            return False
    
    return True

def get_fallback_response(user_message: str = "") -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM
    
    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
    Returns:
        –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    user_message_lower = user_message.lower() if user_message else ""
    
    # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if any(keyword in user_message_lower for keyword in ["–ø–æ–∏—Å–∫", "–Ω–∞–π—Ç–∏", "—Å–ª–æ–≤–∞—Ä—å"]):
        return ("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–µ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ "
                "–∂–µ—Å—Ç–æ–≤–æ–≥–æ —è–∑—ã–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ https://ods.ai/projects/sli –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    if any(keyword in user_message_lower for keyword in ["–æ–±—É—á–µ–Ω–∏–µ", "–∫—É—Ä—Å", "–∏–∑—É—á–µ–Ω–∏–µ"]):
        return ("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–∏—Ö –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö "
                "–ø–æ –∂–µ—Å—Ç–æ–≤–æ–º—É —è–∑—ã–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ https://ods.ai/projects/sli –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    if any(keyword in user_message_lower for keyword in ["–ø–µ—Ä–µ–≤–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"]):
        return ("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ "
                "–∂–µ—Å—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ https://ods.ai/projects/sli –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    return ("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ "
            "–ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç https://ods.ai/projects/sli –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. "
            "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /services –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.") 